/**
 * This file will automatically be loaded by webpack and run in the "renderer" context.
 * To learn more about the differences between the "main" and the "renderer" context in
 * Electron, visit:
 *
 * https://electronjs.org/docs/latest/tutorial/process-model
 *
 * By default, Node.js integration in this file is disabled. When enabling Node.js integration
 * in a renderer process, please be aware of potential security implications. You can read
 * more about security risks here:
 *
 * https://electronjs.org/docs/tutorial/security
 *
 * To enable Node.js integration in this file, open up `main.js` and enable the `nodeIntegration`
 * flag:
 *
 * ```
 *  // Create the browser window.
 *  mainWindow = new BrowserWindow({
 *    width: 800,
 *    height: 600,
 *    webPreferences: {
 *      nodeIntegration: true
 *    }
 *  });
 * ```
 */

import './index.css';
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { VRMLoaderPlugin, VRM, VRMHumanBoneName } from '@pixiv/three-vrm';


let mixer: THREE.AnimationMixer; // mixer Î≥ÄÏàò ÏÑ†Ïñ∏
let currentVrm: VRM | null = null; // ÌòÑÏû¨ Î°úÎìúÎêú VRM Î™®Îç∏ÏùÑ Ï†ÄÏû•Ìï† Î≥ÄÏàò
let controls: OrbitControls | null = null; // OrbitControls Î≥ÄÏàò ÏÑ†Ïñ∏ Î∞è null Ï¥àÍ∏∞Ìôî

const width = window.innerWidth;
const height = window.innerHeight;

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(35, width / height, 0.1, 1000);
camera.position.set(0.0, 0.0, 3.0);
camera.rotation.set(-0.08, 0.0, 0.0);

const light = new THREE.DirectionalLight(0xffffff, 2);
light.position.set(1, 0, 3);
scene.add(light);

const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
renderer.setSize(width, height);
renderer.setClearColor(0x000000, 0);
renderer.outputColorSpace = THREE.SRGBColorSpace;
document.body.appendChild(renderer.domElement);

controls = new OrbitControls(camera, renderer.domElement);

const ambientLight = new THREE.AmbientLight(0x404040, 2); // Î∂ÄÎìúÎü¨Ïö¥ Ï£ºÎ≥ÄÍ¥ë Ï∂îÍ∞Ä
scene.add(ambientLight);

const loader = new GLTFLoader();
loader.register((parser) => new VRMLoaderPlugin(parser)); // VRMLoaderPlugin Îì±Î°ù

loader.load(
  'Liqu.vrm',
  (gltf) => {
    const vrm = gltf.userData.vrm as VRM; // vrmÏóê VRM ÌÉÄÏûÖ Î™ÖÏãú
    vrm.scene.position.set(0, -0.6, 0);
    vrm.scene.rotation.y = Math.PI; // YÏ∂ïÏùÑ Í∏∞Ï§ÄÏúºÎ°ú 180ÎèÑ ÌöåÏ†Ñ (PI ÎùºÎîîÏïà)
    scene.add(vrm.scene);
    currentVrm = vrm; // ÌòÑÏû¨ VRM Î™®Îç∏ Ï†ÄÏû•
    window.currentVrm = vrm; // currentVrmÏùÑ window Í∞ùÏ≤¥Ïóê ÎÖ∏Ï∂ú

    // VRM Î™®Îç∏ Î°úÎìú ÌõÑ Î≥∏ Ïù¥Î¶Ñ Î™©Î°ùÏùÑ Î°úÍ∑∏
    logVrmBoneNames();

    // VRM Î™®Îç∏Ïùò ÎààÍ≥º Î™©Ïù¥ Ïπ¥Î©îÎùºÎ•º Îî∞ÎùºÍ∞ÄÎèÑÎ°ù ÏÑ§Ï†ï

    vrm.lookAt.target = camera;

    // Ìè¨Ï¶à Ï†ÄÏû•/Î°úÎìú Ìï®ÏàòÎ•º window Í∞ùÏ≤¥Ïóê ÎÖ∏Ï∂ú
    window.saveVrmPose = () => {
      if (!currentVrm) return null;
      const pose = currentVrm.humanoid.getNormalizedPose();
      if (pose[VRMHumanBoneName.Spine]) {
        console.log('VRM Pose Saved (Spine bone only):', {
          rotation: pose[VRMHumanBoneName.Spine].rotation,
          position: pose[VRMHumanBoneName.Spine].position,
        });
      } else {
        console.log('VRM Pose Saved: Spine bone data not found.');
      }
      return pose;
    };

    window.loadVrmPose = (pose: any) => {
      if (!currentVrm || !pose) return;
      if (pose[VRMHumanBoneName.Spine]) {
        console.log('Attempting to load pose (Spine bone only):', {
          rotation: pose[VRMHumanBoneName.Spine].rotation,
          position: pose[VRMHumanBoneName.Spine].position,
        });
      } else {
        console.log('Attempting to load pose: Spine bone data not found.');
      }
      currentVrm.humanoid.setNormalizedPose(pose);
      currentVrm.scene.updateMatrixWorld(true); // Ïî¨Ïùò ÏõîÎìú ÌñâÎ†¨ ÏóÖÎç∞Ïù¥Ìä∏ Í∞ïÏ†ú
      console.log('VRM Pose Loaded.');
      createJointSliders(); // Ìè¨Ï¶à Î°úÎìú ÌõÑ Ïä¨ÎùºÏù¥Îçî UI Í∞±Ïã†
    };

    // VRM Î™®Îç∏Ïùò ÌëúÏ†ï Î™©Î°ùÏùÑ Ï†ÑÏó≠ Î≥ÄÏàòÎ°ú ÎÖ∏Ï∂ú
      if (vrm.expressionManager) {
        const actualExpressionNames: string[] = [];
        vrm.expressionManager.expressions.forEach((expressionObj) => {
          // VRMExpression Í∞ùÏ≤¥Ïùò name ÏÜçÏÑ±ÏùÑ ÏÇ¨Ïö©
          actualExpressionNames.push(expressionObj.name);
        });
        console.log('Actual VRM Expression Names (from objects): ', actualExpressionNames);

        // ÏûÑÏãú Îß§Ìïë: Ïã§Ï†ú VRM Î™®Îç∏Ïùò ÌëúÏ†ï Ïù¥Î¶ÑÏóê Îî∞Îùº ÏàòÏ†ïÌï¥Ïïº Ìï©ÎãàÎã§.
        const expressionMap: { [key: string]: string } = {
          'Í∏∞Î≥∏': 'neutral',
          'ÏïÑ': 'aa',
          'Ïù¥': 'ih',
          'Ïö∞': 'ou',
          'Ïóê': 'ee',
          'Ïò§': 'oh',
          'ÎààÍ∞êÏùå': 'blink',
          'ÌñâÎ≥µ': 'happy',
          'ÌôîÎÇ®': 'angry',
          'Ïä¨Ìîî': 'sad',
          'Ìé∏Ïïà': 'relaxed',
          'ÏúÑÎ≥¥Í∏∞': 'lookUp',
          'ÏïÑÎûòÎ≥¥Í∏∞': 'lookDown',
          'ÏôºÏ™ΩÎ≥¥Í∏∞': 'lookLeft',
          'Ïò§Î•∏Ï™ΩÎ≥¥Í∏∞': 'lookRight',
          'ÏôºÏ™ΩÎààÍ∞êÏùå': 'blinkLeft',
          'Ïò§Î•∏Ï™ΩÎààÍ∞êÏùå': 'blinkRight',
          'ÌïòÌä∏': '„Éè„Éº„Éà',
          'Î∞òÏßùÎ∞òÏßù': '„Ç≠„É©„Ç≠„É©',
          'Î©îÎ°±': '„ÅÇ„Å£„Åã„Çì„Åπ„Éº',
          'Ïß∏Î†§Î≥¥Í∏∞': '„Åò„Å®„ÇÅ',
        };

        // LLMÏóê Ï†ÑÎã¨Ìï† ÌëúÏ†ï Î™©Î°ù (ÌïúÍµ≠Ïñ¥ Ïù¥Î¶Ñ)
        window.vrmExpressionList = Object.keys(expressionMap);

        window.expressionMap = expressionMap; // expressionMapÏùÑ window Í∞ùÏ≤¥Ïóê ÎÖ∏Ï∂ú
        console.log('VRM Expression List (Mapped for LLM):', window.vrmExpressionList);
        console.log('Type of vrm.expressionManager.expressions:', typeof vrm.expressionManager.expressions);
      }

    // Ïï†ÎãàÎ©îÏù¥ÏÖò ÎØπÏÑú ÏÉùÏÑ±
    mixer = new THREE.AnimationMixer(vrm.scene);

    // VRM Î™®Îç∏Ïóê Ïï†ÎãàÎ©îÏù¥ÏÖò ÌÅ¥Î¶ΩÏù¥ ÏûàÎã§Î©¥ Ïû¨ÏÉù
    console.log('GLTF Animations Length:', gltf.animations.length); // Ïù¥ Ï§ÑÏùÑ Ï∂îÍ∞ÄÌï©ÎãàÎã§.
    window.vrmAnimationList = gltf.animations; // Ïï†ÎãàÎ©îÏù¥ÏÖò ÌÅ¥Î¶ΩÏùÑ window Í∞ùÏ≤¥Ïóê ÎÖ∏Ï∂ú

    // ÎîîÎ≤ÑÍ∑∏ Î°úÍ∑∏ Ï∂îÍ∞Ä: VRM Î™®Îç∏Ïùò Î∞îÏö¥Îî© Î∞ïÏä§ ÌôïÏù∏
    vrm.scene.updateMatrixWorld(true); // ÏõîÎìú ÌñâÎ†¨ ÏóÖÎç∞Ïù¥Ìä∏
    const box = new THREE.Box3().setFromObject(vrm.scene);
    const size = box.getSize(new THREE.Vector3());
    const center = box.getCenter(new THREE.Vector3());

    console.log('VRM Model Bounding Box:', box);
    console.log('VRM Model Size:', size);
    console.log('VRM Model Center:', center);
    console.log('VRM Model Position:', vrm.scene.position);

    // Ïï†ÎãàÎ©îÏù¥ÏÖò Î≤ÑÌäº ÏÉùÏÑ± Î∞è Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï (Ïù¥ Î∂ÄÎ∂ÑÏùÑ loader.load ÏΩúÎ∞± ÏïàÏúºÎ°ú Ïù¥Îèô)
    const animationButtonsContainer = document.getElementById('animation-buttons');
    if (animationButtonsContainer) {
      // Í∏∞Ï°¥ Ïï†ÎãàÎ©îÏù¥ÏÖò ÌååÏùº Î°úÎî© Î°úÏßÅ Ï†úÍ±∞

      // ÎîîÎ≤ÑÍ∑∏Ïö© Ïπ¥Î©îÎùº Ï†ïÎ≥¥ Î°úÍ∑∏ Î≤ÑÌäº Ï∂îÍ∞Ä
      const debugButton = document.createElement('button');
      debugButton.textContent = 'Log Camera Info';
      debugButton.style.margin = '5px';
      debugButton.style.padding = '10px';
      debugButton.style.backgroundColor = '#28a745'; // Green color
      debugButton.style.color = 'white';
      debugButton.style.border = 'none';
      debugButton.style.borderRadius = '5px';
      debugButton.style.cursor = 'pointer';

      debugButton.onclick = () => {
        console.log('Camera Position:', camera.position);
        console.log('Camera Rotation:', camera.rotation);
      };
      animationButtonsContainer.appendChild(debugButton);
    }
  },
  undefined,
  (error) => {
    console.error('VRM Î°úÎìú Ïã§Ìå®:', error);
  }
);

const clock = new THREE.Clock(); // Ïï†ÎãàÎ©îÏù¥ÏÖò ÏóÖÎç∞Ïù¥Ìä∏Î•º ÏúÑÌïú Clock Ï∂îÍ∞Ä

function animate() {
  requestAnimationFrame(animate);

  const delta = clock.getDelta(); // Ïù¥Ï†Ñ ÌîÑÎ†àÏûÑÍ≥ºÏùò ÏãúÍ∞Ñ Ï∞®Ïù¥ Í≥ÑÏÇ∞
  if (mixer) {
    mixer.update(delta);
  }

  if (currentVrm) {

    const head = currentVrm.humanoid.getNormalizedBoneNode('head');
    
    if (head) {
      const camPos = new THREE.Vector3();
      camera.getWorldPosition(camPos);

      const headPos = new THREE.Vector3();
      head.getWorldPosition(headPos);

      const targetDir = new THREE.Vector3().subVectors(headPos, camPos).normalize();
      targetDir.y *= -1;
      const targetQuat = new THREE.Quaternion().setFromUnitVectors(new THREE.Vector3(0, 0, -1), targetDir);

      // ÌòÑÏû¨ ÌöåÏ†ÑÏóêÏÑú Î™©Ìëú ÌöåÏ†ÑÏúºÎ°ú Î∂ÄÎìúÎüΩÍ≤å Ïù¥Îèô
      head.quaternion.slerp(targetQuat, 0.1); // 0.1ÏùÄ Î≥¥Í∞Ñ ÎπÑÏú®, Îçî ÏûëÍ≤å ÌïòÎ©¥ Îçî ÎäêÎ¶º
    }

    currentVrm.update(delta); // VRM Î™®Îç∏ ÏóÖÎç∞Ïù¥Ìä∏ Ï∂îÍ∞Ä


    // Î™®Îì† SkinnedMeshÏùò Ïä§ÏºàÎ†àÌÜ§ ÏóÖÎç∞Ïù¥Ìä∏
    currentVrm.scene.traverse(object => {
      if ((object as THREE.SkinnedMesh).isSkinnedMesh) {
        (object as THREE.SkinnedMesh).skeleton.update();
      }
    });

  }

  if (controls) {
    controls.update();
  }

  renderer.render(scene, camera);
}
animate();

console.log('üëã VRM Ïò§Î≤ÑÎ†àÏù¥ Î°úÎî© ÏôÑÎ£å');

function animateExpression(expressionName: string, targetWeight: number, duration: number) {
  if (!window.currentVrm || !window.currentVrm.expressionManager || !window.expressionMap) {
    console.warn('VRM model or expressionManager not ready for animation.');
    return;
  }

  const expressionManager = window.currentVrm.expressionManager;
  const startWeight = expressionManager.getValue(expressionName) || 0.0;
  const startTime = performance.now();

  // Reset all other expressions to 0 before starting the animation
  for (const mappedName in window.expressionMap) {
    const vrmInternalName = window.expressionMap[mappedName];
    if (vrmInternalName && vrmInternalName !== expressionName) {
      expressionManager.setValue(vrmInternalName, 0.0);
    }
  }

  function step(currentTime: number) {
    const elapsedTime = currentTime - startTime;
    const progress = Math.min(elapsedTime / (duration * 1000), 1); // progress from 0 to 1

    const currentWeight = startWeight + (targetWeight - startWeight) * progress;
    expressionManager.setValue(expressionName, currentWeight);
    expressionManager.update();

    if (progress < 1) {
      requestAnimationFrame(step);
    }
  }

  requestAnimationFrame(step);
}

window.animateExpression = animateExpression; // Expose to window object

// ÎîîÎ≤ÑÍ∑∏Ïö© ÌëúÏ†ï Ï†ÑÌôò Î≤ÑÌäº Î°úÏßÅ (Ï†êÏßÑÏ†Å Î≥ÄÌôî Ï†ÅÏö©)
const smileDebugButton = document.getElementById('smile-debug-button');
if (smileDebugButton) {
  let currentDebugExpressionIndex = 0; // ÎîîÎ≤ÑÍ∑∏ Î≤ÑÌäºÏö© Ïù∏Îç±Ïä§
  smileDebugButton.onclick = () => {
    if (window.currentVrm && window.currentVrm.expressionManager && window.vrmExpressionList && window.vrmExpressionList.length > 0 && window.expressionMap) {
      const nextMappedExpression = window.vrmExpressionList[currentDebugExpressionIndex];
      const nextInternalExpression = window.expressionMap[nextMappedExpression];

      if (nextInternalExpression) {
        // animateExpression Ìï®ÏàòÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÌëúÏ†ïÏùÑ Ï†êÏßÑÏ†ÅÏúºÎ°ú Î≥ÄÍ≤Ω
        window.animateExpression(nextInternalExpression, 1.0, 0.5); // 0.5Ï¥à ÎèôÏïà Î≥ÄÍ≤Ω
        console.log(`Debug: Applied expression: ${nextMappedExpression} (Internal: ${nextInternalExpression}) with animation`);
      } else {
        console.warn(`Debug: Internal VRM expression name not found for mapped expression: ${nextMappedExpression}`);
      }

      currentDebugExpressionIndex = (currentDebugExpressionIndex + 1) % window.vrmExpressionList.length;
    } else {
      console.warn('Debug: VRM model or expression list/map not ready.');
    }
  };
}

// ÎîîÎ≤ÑÍ∑∏Ïö© ÎûúÎç§ Ìè¨Ï¶à Î≤ÑÌäº Î°úÏßÅ
const randomPoseButton = document.getElementById('random-pose-button');
if (randomPoseButton) {
  randomPoseButton.onclick = () => {
    if (currentVrm) {
      // VRMHumanoidÏùò Î™®Îì† Î≥∏ÏùÑ ÏàúÌöåÌïòÎ©∞ Î¨¥ÏûëÏúÑ ÌöåÏ†Ñ Ï†ÅÏö©
      const boneNames = Object.keys(currentVrm.humanoid.humanBones);
      boneNames.forEach(boneName => {
        const bone = currentVrm.humanoid.getNormalizedBoneNode(boneName as VRMHumanBoneName);
        if (bone) {
          const randomQuaternion = new THREE.Quaternion().setFromEuler(new THREE.Euler(
            (Math.random() - 0.5) * Math.PI / 2,
            (Math.random() - 0.5) * Math.PI / 2,
            (Math.random() - 0.5) * Math.PI / 2
          ));
          bone.setRotationFromQuaternion(randomQuaternion);
          bone.updateMatrixWorld(true); // Î≥∏Ïùò ÏõîÎìú ÌñâÎ†¨ ÏóÖÎç∞Ïù¥Ìä∏ Í∞ïÏ†ú
        } else {
          console.warn(`Bone node not found for: ${boneName}`);
        }
      });
      currentVrm.humanoid.update(); // Ìú¥Î®∏ÎÖ∏Ïù¥Îìú ÏóÖÎç∞Ïù¥Ìä∏
      currentVrm.scene.updateMatrixWorld(true); // Ïî¨Ïùò ÏõîÎìú ÌñâÎ†¨ ÏóÖÎç∞Ïù¥Ìä∏ Í∞ïÏ†ú
      console.log('Applied random pose.');
      createJointSliders(); // ÎûúÎç§ Ìè¨Ï¶à Ï†ÅÏö© ÌõÑ Ïä¨ÎùºÏù¥Îçî UI Í∞±Ïã†
    } else {
      console.warn('VRM model not ready for random pose.');
    }
  };
}


// --- TTS Integration Start ---

// Ïò§ÎîîÏò§ Ïª®ÌÖçÏä§Ìä∏Î•º Ï†ÄÏû•Ìï† Î≥ÄÏàò
let audioContext: AudioContext | null = null;
// ÌòÑÏû¨ Ïû¨ÏÉù Ï§ëÏù∏ Ïò§ÎîîÏò§ ÏÜåÏä§Î•º Ï†ÄÏû•Ìï† Î≥ÄÏàò
let currentAudioSource: AudioBufferSourceNode | null = null;

/**
 * ÏÇ¨Ïö©ÏûêÏùò Ï≤´ ÏÉÅÌò∏ÏûëÏö© Ïãú Ïò§ÎîîÏò§ Ïª®ÌÖçÏä§Ìä∏Î•º Ï¥àÍ∏∞ÌôîÌï©ÎãàÎã§.
 * Î∏åÎùºÏö∞Ï†ÄÏùò ÏûêÎèô Ïû¨ÏÉù Ï†ïÏ±ÖÏùÑ Ï§ÄÏàòÌïòÍ∏∞ ÏúÑÌï¥ ÌïÑÏöîÌï©ÎãàÎã§.
 */
function initAudioContext() {
  if (!audioContext) {
    try {
      audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      console.log("AudioContext initialized.");
    } catch (e) {
      console.error("Failed to initialize AudioContext:", e);
    }
  }
}

// ÏÇ¨Ïö©ÏûêÍ∞Ä ÌÅ¥Î¶≠Ïù¥ÎÇò ÌÉ≠ÏùÑ Ìï† Îïå Ïò§ÎîîÏò§ Ïª®ÌÖçÏä§Ìä∏Î•º Ï¥àÍ∏∞ÌôîÌïòÎèÑÎ°ù Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑàÎ•º Ï∂îÍ∞ÄÌï©ÎãàÎã§.
document.body.addEventListener('click', initAudioContext, { once: true });
document.body.addEventListener('touchend', initAudioContext, { once: true });


/**
 * Ï£ºÏñ¥ÏßÑ ÌÖçÏä§Ìä∏Ïóê ÎåÄÌïú TTS Ïò§ÎîîÏò§Î•º ÏöîÏ≤≠ÌïòÍ≥† Ïû¨ÏÉùÌï©ÎãàÎã§.
 * @param text Ïû¨ÏÉùÌï† ÌÖçÏä§Ìä∏
 */
async function playTTS(text: string) {
  if (!text) {
    console.warn("TTS ÏöîÏ≤≠ ÌÖçÏä§Ìä∏Í∞Ä ÎπÑÏñ¥ÏûàÏäµÎãàÎã§.");
    return;
  }

  // Ïò§ÎîîÏò§ Ïª®ÌÖçÏä§Ìä∏Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÎäîÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§.
  if (!audioContext) {
    console.warn("AudioContextÍ∞Ä ÏïÑÏßÅ Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. ÏÇ¨Ïö©ÏûêÏùò ÏÉÅÌò∏ÏûëÏö©Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
    // Í∞ïÏ†úÎ°ú Ï¥àÍ∏∞ÌôîÎ•º ÏãúÎèÑÌï† Ïàò ÏûàÏäµÎãàÎã§.
    initAudioContext();
    if (!audioContext) {
        alert("Ïò§ÎîîÏò§Î•º Ïû¨ÏÉùÌïòÎ†§Î©¥ ÌôîÎ©¥ÏùÑ Ìïú Î≤à ÌÅ¥Î¶≠Ìï¥Ï£ºÏÑ∏Ïöî.");
        return;
    }
  }

  // Ïù¥Ï†ÑÏóê Ïû¨ÏÉù Ï§ëÏù¥Îçò Ïò§ÎîîÏò§Í∞Ä ÏûàÎã§Î©¥ Ï§ëÏßÄÌï©ÎãàÎã§.
  if (currentAudioSource) {
    currentAudioSource.stop();
    currentAudioSource.disconnect();
    currentAudioSource = null;
    console.log("Previous audio stopped.");
  }

  console.log(`TTS ÏöîÏ≤≠ Ï†ÑÏÜ°: "${text}"`);

  try {
    // Î∞±ÏóîÎìú TTS APIÏóê ÏöîÏ≤≠ÏùÑ Î≥¥ÎÉÖÎãàÎã§.
    const response = await fetch('http://localhost:8000/api/tts', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ text: text, engine: 'gtts' }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`TTS API Ïò§Î•ò: ${response.status} - ${errorData.detail || 'Unknown error'}`);
    }
    console.log("TTS API ÏùëÎãµ ÏàòÏã† ÏôÑÎ£å. Ïò§ÎîîÏò§ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ ÏãúÏûë...");

    // ÏùëÎãµÏúºÎ°ú Î∞õÏùÄ Ïò§ÎîîÏò§ Îç∞Ïù¥ÌÑ∞Î•º ArrayBufferÎ°ú Î≥ÄÌôòÌï©ÎãàÎã§.
    const audioData = await response.arrayBuffer();
    console.log(`Ïò§ÎîîÏò§ Îç∞Ïù¥ÌÑ∞ ÏàòÏã† ÏôÑÎ£å (ÌÅ¨Í∏∞: ${audioData.byteLength} Î∞îÏù¥Ìä∏). ÎîîÏΩîÎî© ÏãúÏûë...`);

    // ArrayBufferÎ•º ÎîîÏΩîÎî©ÌïòÏó¨ Ïò§ÎîîÏò§ Î≤ÑÌçºÎ°ú ÎßåÎì≠ÎãàÎã§.
    const audioBuffer = await audioContext.decodeAudioData(audioData);
    console.log("Ïò§ÎîîÏò§ Îç∞Ïù¥ÌÑ∞ ÎîîÏΩîÎî© ÏôÑÎ£å.");

    // Ïò§ÎîîÏò§ Î≤ÑÌçº ÏÜåÏä§Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
    const source = audioContext.createBufferSource();
    source.buffer = audioBuffer;
    source.connect(audioContext.destination);

    // Ïò§ÎîîÏò§ Ïû¨ÏÉùÏùÑ ÏãúÏûëÌï©ÎãàÎã§.
    source.start(0);
    console.log("Ïò§ÎîîÏò§ Ïû¨ÏÉù ÏãúÏûë.");

    // ÌòÑÏû¨ Ïò§ÎîîÏò§ ÏÜåÏä§Î•º Ï∂îÏ†ÅÌï©ÎãàÎã§.
    currentAudioSource = source;

    // Ïò§ÎîîÏò§ Ïû¨ÏÉùÏù¥ ÎÅùÎÇòÎ©¥ ÏÜåÏä§Î•º nullÎ°ú ÏÑ§Ï†ïÌï©ÎãàÎã§.
    source.onended = () => {
      console.log("Ïò§ÎîîÏò§ Ïû¨ÏÉù ÏôÑÎ£å.");
      if (currentAudioSource === source) {
        currentAudioSource = null;
      }
      source.disconnect();
    };

  } catch (error) {
    console.error("TTS Ïò§ÎîîÏò§ Ïû¨ÏÉù Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
    // ÏÇ¨Ïö©ÏûêÏóêÍ≤å Ïò§Î•òÎ•º ÏïåÎ¶¥ Ïàò ÏûàÏäµÎãàÎã§.
    // alert(`TTS Ïò§ÎîîÏò§Î•º Ïû¨ÏÉùÌïòÎäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${error.message}`);
  }
}

// Îã§Î•∏ Ïä§ÌÅ¨Î¶ΩÌä∏ÏóêÏÑú playTTS Ìï®ÏàòÎ•º ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎèÑÎ°ù window Í∞ùÏ≤¥Ïóê ÎÖ∏Ï∂úÌï©ÎãàÎã§.
window.playTTS = playTTS;

// --- TTS Integration End ---

// --- Joint Control Start ---
function createJointSliders() {
  if (!currentVrm) return;

  const slidersContainer = document.getElementById('joint-sliders');
  if (!slidersContainer) return;

  // Clear existing sliders
  slidersContainer.innerHTML = '';

  Object.values(VRMHumanBoneName).forEach(boneName => {
    const bone = currentVrm.humanoid.getNormalizedBoneNode(boneName);
    if (bone) {
      const boneControl = document.createElement('div');
      boneControl.style.marginBottom = '15px';

      const label = document.createElement('label');
      label.textContent = boneName;
      label.style.display = 'block';
      label.style.marginBottom = '5px';
      boneControl.appendChild(label);

      ['x', 'y', 'z'].forEach(axis => {
        const sliderContainer = document.createElement('div');
        sliderContainer.style.display = 'flex';
        sliderContainer.style.alignItems = 'center';
        sliderContainer.style.marginBottom = '5px';

        const axisLabel = document.createElement('span');
        axisLabel.textContent = axis.toUpperCase();
        axisLabel.style.width = '20px';
        sliderContainer.appendChild(axisLabel);

        const slider = document.createElement('input');
        slider.type = 'range';
        slider.min = '-180';
        slider.max = '180';
        // ÌòÑÏû¨ Î≥∏Ïùò Ìï¥Îãπ Ï∂ï ÌöåÏ†Ñ Í∞íÏùÑ Ïä¨ÎùºÏù¥Îçî Ï¥àÍ∏∞Í∞íÏúºÎ°ú ÏÑ§Ï†ï (ÎùºÎîîÏïàÏùÑ ÎèÑÎ°ú Î≥ÄÌôò)
        const currentEuler = new THREE.Euler().setFromQuaternion(bone.quaternion, 'XYZ');
        slider.value = THREE.MathUtils.radToDeg(currentEuler[axis as 'x' | 'y' | 'z']).toFixed(0);
        slider.style.flexGrow = '1';
        slider.oninput = () => {
          const x = boneControl.querySelector<HTMLInputElement>('.slider-x').value;
          const y = boneControl.querySelector<HTMLInputElement>('.slider-y').value;
          const z = boneControl.querySelector<HTMLInputElement>('.slider-z').value;
          
          const euler = new THREE.Euler(
            THREE.MathUtils.degToRad(parseFloat(x)),
            THREE.MathUtils.degToRad(parseFloat(y)),
            THREE.MathUtils.degToRad(parseFloat(z)),
            'XYZ'
          );
          bone.setRotationFromEuler(euler);
        };
        slider.className = `slider-${axis}`;
        sliderContainer.appendChild(slider);
        boneControl.appendChild(sliderContainer);
      });
      slidersContainer.appendChild(boneControl);
    }
  });
}

window.createJointSliders = createJointSliders;
// --- Joint Control End ---

// VRM Î™®Îç∏Ïùò Î™®Îì† Î≥∏ Ïù¥Î¶ÑÏùÑ ÏΩòÏÜîÏóê Î°úÍπÖÌïòÎäî Ìï®Ïàò
function logVrmBoneNames() {
  if (!currentVrm) {
    console.warn('VRM model not loaded. Cannot log bone names.');
    return;
  }

  console.log('--- VRM Humanoid Bone Names ---');
  Object.entries(currentVrm.humanoid.humanBones).forEach(([boneName, bone]) => {
    if (bone && bone.node) {
      console.log(`HumanBoneName: ${boneName}, Node Name: ${bone.node.name}`);
    } else {
      console.log(`HumanBoneName: ${boneName}, Node: (null or undefined)`);
    }
  });
  console.log('-------------------------------');
}

window.logVrmBoneNames = logVrmBoneNames; // window Í∞ùÏ≤¥Ïóê ÎÖ∏Ï∂ú




