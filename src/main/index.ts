import { app, BrowserWindow, Tray, Menu, globalShortcut, dialog, session, ipcMain } from 'electron';
import * as path from 'path';
import * as fs from 'fs';

process.on('uncaughtException', (error) => {
  const message = error.stack || error.message || 'Unknown error';
  dialog.showErrorBox('A JavaScript error occurred in the main process', message);
  app.quit();
});

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let tray: Tray | null = null;
let overlayWindow: BrowserWindow | null = null;

const createOverlayWindow = (): void => {
  if (overlayWindow) {
    overlayWindow.focus();
    return;
  }
  overlayWindow = new BrowserWindow({
    fullscreen: true,
    skipTaskbar: true,
    frame: false,
    transparent: true,
    alwaysOnTop: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webSecurity: true, // 보안 검사 활성화
      nodeIntegration: true, // Node.js 통합 활성화
      contextIsolation: false, // 컨텍스트 격리 비활성화
      webgl: true, // WebGL 활성화
      
    },
  });
  overlayWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  overlayWindow.on('closed', () => {
    overlayWindow = null;
  });
};

const toggleOverlayWindow = (): void => {
  if (overlayWindow) {
    overlayWindow.close();
    overlayWindow = null;
  } else {
    createOverlayWindow();
  }
};





const assetsRoot = app.isPackaged
  ? path.join(process.resourcesPath, 'assets')
  : path.join(app.getAppPath(), 'assets');

const createTray = (): void => {
  const iconPath = path.join(assetsRoot, 'icon.png');
  tray = new Tray(iconPath);
  const contextMenu = Menu.buildFromTemplate([
    { label: 'Show Overlay', click: () => createOverlayWindow() },
    { label: 'Quit', click: () => app.quit() },
  ]);
  tray.setToolTip('AI-GF MVP');
  tray.setContextMenu(contextMenu);
};

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webSecurity: true, // 보안 검사 활성화
      nodeIntegration: true, // Node.js 통합 활성화
      contextIsolation: false, // 컨텍스트 격리 비활성화
      webgl: true, // WebGL 활성화
      
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createWindow();
  createTray();
  globalShortcut.register('CommandOrControl+Shift+O', () => {
    toggleOverlayWindow();
  });

  // IPC handler for listing directories
  ipcMain.handle('list-directory', async (event, dirPath: string) => {
    try {
      const fullPath = path.join(assetsRoot, dirPath);
      const dirents = await fs.promises.readdir(fullPath, { withFileTypes: true });
      const files = dirents.filter(dirent => dirent.isFile()).map(dirent => dirent.name);
      const directories = dirents.filter(dirent => dirent.isDirectory()).map(dirent => dirent.name);
      return { files, directories };
    } catch (error) {
      console.error(`Failed to list directory ${dirPath}:`, error);
      return { files: [], directories: [], error: error.message };
    }
  });

  ipcMain.handle('save-vrma-pose', async (event, vrmaData: ArrayBuffer) => {
    const { canceled, filePath } = await dialog.showSaveDialog({
      title: 'Save VRMA Pose',
      defaultPath: path.join(assetsRoot, 'Pose', `pose_${Date.now()}.vrma`),
      filters: [
        { name: 'VRM Animation', extensions: ['vrma'] },
        { name: 'All Files', extensions: ['*'] }
      ]
    });

    if (canceled || !filePath) {
      return { success: false, message: 'Save operation canceled.' };
    }

    try {
      const buffer = Buffer.from(vrmaData);
      await fs.promises.writeFile(filePath, buffer);
      return { success: true, message: `VRMA pose saved to ${filePath}` };
    } catch (error) {
      console.error('Failed to save VRMA pose:', error);
      const message = error instanceof Error ? error.message : String(error);
      return { success: false, message: `Failed to save VRMA pose: ${message}` };
    }
  });

  ipcMain.handle('open-vrm-file', async () => {
    const { canceled, filePaths } = await dialog.showOpenDialog({
      title: 'Open VRM Model',
      defaultPath: path.join(assetsRoot, 'VRM'),
      filters: [
        { name: 'VRM Models', extensions: ['vrm'] },
        { name: 'All Files', extensions: ['*'] },
      ],
      properties: ['openFile'],
    });

    if (canceled || filePaths.length === 0) {
      return null;
    }

    return filePaths[0];
  });

  ipcMain.handle('open-vrma-file', async () => {
    const { canceled, filePaths } = await dialog.showOpenDialog({
      title: 'Open VRMA Pose',
      defaultPath: path.join(assetsRoot, 'Pose'),
      filters: [
        { name: 'VRM Animation', extensions: ['vrma'] },
        { name: 'All Files', extensions: ['*'] },
      ],
      properties: ['openFile'],
    });

    if (canceled || filePaths.length === 0) {
      return null;
    }

    return filePaths[0];
  });

  ipcMain.handle('open-persona-file', async () => {
    const { canceled, filePaths } = await dialog.showOpenDialog({
      title: 'Open Persona File',
      defaultPath: path.join(assetsRoot, 'Persona'),
      properties: ['openFile'],
      filters: [
        { name: 'Text Files', extensions: ['txt'] },
        { name: 'All Files', extensions: ['*'] }
      ]
    });

    if (canceled || filePaths.length === 0) {
      return null;
    }

    try {
      const personaContent = await fs.promises.readFile(filePaths[0], 'utf8');
      return personaContent;
    } catch (error) {
      console.error('Failed to read persona file:', error);
      return null;
    }
  });

  ipcMain.handle('read-asset-file', async (event, filePath: string) => {
    try {
      const fullPath = path.join(assetsRoot, filePath);
      if (!fullPath.startsWith(assetsRoot)) {
        throw new Error('Attempted to read file outside the assets directory.');
      }
      const data = await fs.promises.readFile(fullPath);
      return data.buffer;
    } catch (error) {
      console.error(`Failed to read asset file ${filePath}:`, error);
      return { error: error.message };
    }
  });

  ipcMain.handle('read-absolute-file', async (event, filePath: string) => {
    try {
      // Basic security check: ensure it's an absolute path.
      if (!path.isAbsolute(filePath)) {
        throw new Error('Path must be absolute.');
      }
      // More security checks can be added here if needed (e.g., file type).
      const data = await fs.promises.readFile(filePath);
      return data.buffer;
    } catch (error) {
      console.error(`Failed to read absolute file ${filePath}:`, error);
      return { error: error.message };
    }
  });

  ipcMain.handle('save-persona-to-file', async (event, persona: string) => {
    const { canceled, filePath } = await dialog.showSaveDialog({
      title: 'Save Persona',
      defaultPath: path.join(assetsRoot, 'Persona', 'persona.txt'),
      filters: [
        { name: 'Text Files', extensions: ['txt'] },
        { name: 'All Files', extensions: ['*'] }
      ]
    });

    if (canceled || !filePath) {
      return { success: false, message: 'Save operation canceled.' };
    }

    try {
      await fs.promises.writeFile(filePath, persona, 'utf8');
      return { success: true, message: `Persona saved to ${filePath}` };
    } catch (error) {
      console.error('Failed to save persona:', error);
      const message = error instanceof Error ? error.message : String(error);
      return { success: false, message: `Failed to save persona: ${message}` };
    }
  });

  // CSP 설정
  session.defaultSession.webRequest.onHeadersReceived((details: Electron.OnHeadersReceivedListenerDetails, callback: (response: { cancel?: boolean; responseHeaders?: Record<string, string[]> }) => void) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [
          "default-src 'self' 'unsafe-inline' 'unsafe-eval' blob: data: file:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob:; connect-src 'self' blob: https://generativelanguage.googleapis.com http://localhost:8000 file:;"
        ]
      }
    });
  });
});

app.on('will-quit', () => {
  globalShortcut.unregisterAll();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
